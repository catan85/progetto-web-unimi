
<!DOCTYPE HTML>
<!--
	IOT METRIC VIEWER - by Andrea Cattaneo M.909227

	TEMPLATE:
	Astral by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
-->
<html>
	<head>
		<title>IOT-Metric viewer</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
		<link rel="stylesheet" href="stylesheets/main.css" />
		<link rel="stylesheet" href="stylesheets/style.css" />
		<noscript><link rel="stylesheet" href="stylesheets/noscript.css" /></noscript>

	</head>
	<body class="is-preload">

		<!-- Wrapper-->
			<div id="wrapper">

				<!-- Nav -->
					<nav id="nav">
						<a href="#home" class="icon fa-home"><span>Home</span></a>
            			<a href="#charts" class="icon fa-line-chart"><span>Charts</span></a>
						{{#if user}}
						<a href="logout" class="icon fa-sign-out"><span>Sign out</span></a>
						{{/if}}
					</nav>

				<!-- Main -->
					<div id="main">
					<article id="home" class="panel intro">
					   <header>
							{{#if user}}
								<p>Hello, {{user.username}}!</p>
							{{else}}
								<p>Please <a href="#login">log in</a>.</p>
							{{/if}}

					   </header>
					</article>
					
					<article id="charts" class="panel">
						{{#if user}}
					
							<p>Charts page:</p>
							
							<div class="chart-wrapper">
								<canvas id="line-chart" ></canvas>
							</div>
							
							<script src="javascripts/moment.js"></script>
							<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
							<script>
		
								function createXMLHttpRequest() {
									try {return new ActiveXObject("Msxml2.XMLHTTP");} catch (e) {}
									try {return new ActiveXObject("Microsoft.XMLHTTP");} catch (e) {}
									try {return new XMLHttpRequest(); } catch (e) {}
									alert("XMLHttpRequest non supportato");
									return null;
								}
								window.onload = function() {
									var rq = createXMLHttpRequest();

									rq.onreadystatechange = function(){
										if (rq.readyState==4){
											if(rq.status==200){ 
												
												var measures = JSON.parse(rq.response).reverse();
										
												// response è un array di 30 valori che
												// deve poi essere passaro al chart

												// NOTA:											
												// Utilizzando il tipo time non dovevo riconvertire in stringa i valori
												// e funzionava bene, ma purtroppo diventava lentissimo il primo caricamento 
												// del chart. Per questo motivo ho lasciato la scala del tempo
												// come tipo di dato testo
												// essendo acquisiti a tempo costante non c'è problema nella rappresentazione
												// inserendoli come testo infatti equidistanzia i valori sulle x
												
												var chart = new Chart(document.getElementById("line-chart"), {
													type: 'line',
													data: {
														
														labels: measures.map(v => moment(new Date(v.timestamp)).format("HH:mm:ss")),
														datasets: [{ 
															data: measures.map(v => v.torque),
															label: "Torque",
															borderColor: "#3e95cd",
															fill: false,
															yAxisID: 'ax1',
														}, { 
															data: measures.map(v => v.speed),
															label: "Speed",
															borderColor: "#8e5ea2",
															fill: false,
															yAxisID: 'ax2',
														}, { 
															data: measures.map(v => v.temperature),
															label: "Temperature",
															borderColor: "#3cba9f",
															fill: false,
															yAxisID: 'ax3',
														}
														]
													},
													options: {
														responsive: true,
														maintainAspectRatio: false,
														title: {
															display: true,
															text: 'Measures'
														},
														scales: {
															
															/* Ho smesso di usare il tipo time per problemi di lentezza nel caricamento all'avvio
															xAxes: [{
																type: 'time'
															}],
															*/
															yAxes: 
															[	{
																	id: 'ax1',
																	type: 'linear',
																	position: 'left',
																}, {
																	id: 'ax2',
																	type: 'linear',
																	position: 'right'
																}, {
																	id: 'ax3',
																	type: 'linear',
																	position: 'right'//,
																	//ticks: {
																	//	max: 1,
																	//	min: 0
																	//}
																}
															]
																														
														}
													}
												});
												setInterval(function() {
													// rimozione del punto più vecchio
													console.log("calling update..");

													// ricezione dei dati aggiornati
													// creare una nuova richiesta alla ricezione della
													// quale si va ad eseguire la rimozione dei vecchi
													// punti e l'inserimento dei nuovi
													var updateRequest = createXMLHttpRequest();

													updateRequest.onreadystatechange = function(){
														if (updateRequest.readyState==4){
															if(updateRequest.status==200){ 
																console.log("received response..");
																
																var newMeasures = JSON.parse(updateRequest.response).reverse();
																for( i=0; i < newMeasures.length; i++)
																{
																	var exists = false;
																	for (j =0; j < measures.length; j++)
																	{
																		if (newMeasures[i].timestamp == measures[j].timestamp)
																		{
																			exists = true;
																			break;
																		}
																	}
																	if (!exists)
																	{
																		if (chart.data.labels.length >= 30)
																		{
																			// removing one point
																			chart.data.labels.splice(0,1);
																			chart.data.datasets.forEach((dataset) => {
																				dataset.data.splice(0,1);
																			});
																		}

																		console.log("new measure found.. adding");
																		chart.data.labels.push(moment(new Date(newMeasures[i].timestamp)).format("HH:mm:ss"));
																		chart.data.datasets.forEach((dataset) => {
																			if (dataset.label == "Torque")
																			{
																				dataset.data.push(newMeasures[i].torque);
																			}else if (dataset.label == "Speed")
																			{
																				dataset.data.push(newMeasures[i].speed);
																			}else if (dataset.label == "Temperature")
																			{
																				dataset.data.push(newMeasures[i].temperature);
																			}
																		});

																	}
																}
																measures = newMeasures;
																chart.update();
														
															}
														}
													}

													updateRequest.open("GET", "api/charts", true); // apre la connessione  (true=async)
													updateRequest.send();
												}, 1000); //1 second refresh
											}
											else{ alert("Errore di chiamata"); }
										}			
									}
										rq.open("GET", "api/charts", true); // apre la connessione (true=async)
										rq.send();	
								}
								
							</script>
						{{else}}
							<p> Please <a href="#login">log in</a>.</p>
						{{/if}}

					</article>

					  <article id="login" class="panel login-form">
						    <form action="/login" method="post">
								<div>
								<label>Username:</label>
								<input type="text" name="username"/><br/>
								</div>
								<div>
								<label>Password:</label>
								<input type="password" name="password"/>
								</div>
						
								<div class="submit-button-wrapper">
									<input type="submit" value="Submit" />
								</div>
								<div class="register-button-wrapper">
									<a href="#register" class="button register-button" >Register</a>
								</div>
							</form>
					  </article>

					<article id="register" class="panel">
						    <form action="/register" method="post">	
								<div>
								<label>Username:</label>
								<input type="text" name="username"/><br/>
								</div>
								<div>
								<label>Password:</label>
								<input type="password" name="password"/>
								</div>
								<div>
								<div>
								<input type="submit" value="Submit"/>
								</div>
							
								</div>
							</form>
					  </article>
			  		</div>

				<!-- Footer -->
					<div id="footer">
						<ul class="copyright">
							<li>&copy; IOT - Metric Viewer.</li><li>Design: <a href="http://html5up.net">HTML5 UP</a></li>
						</ul>
					</div>
			</div>


		<!-- Scripts -->
			<script src="javascripts/jquery.min.js"></script>
			<script src="javascripts/browser.min.js"></script>
			<script src="javascripts/breakpoints.min.js"></script>
			<script src="javascripts/util.js"></script>
			<script src="javascripts/main.js"></script>
			
			
	</body>
</html>